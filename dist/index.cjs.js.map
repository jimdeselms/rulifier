{"version":3,"file":"index.cjs.js","sources":["../src/builtinDirectives.js","../src/index.js"],"sourcesContent":["const ROOT_CONTEXT_TRUE = Symbol.for(\"__TRUE\")\nconst ROOT_CONTEXT_FALSE = Symbol.for(\"__FALSE\")\n\nconst RAW_VALUE = Symbol.for(\"__RAW_VALUE\")\nconst GET_WITH_NEW_ROOT = Symbol.for(\"__GET_WITH_NEW_ROOT\")\n\nexport const builtinDirectives = {\n    async $directives() {\n        throw new Error(\"directives can only be defined at the root of a context\")\n    },\n\n    async $if(obj) {\n        const condition = await obj.condition\n        return condition ? obj.then : obj.else\n    },\n\n    async $match(obj, { root }) {\n        obj = await obj\n        if (Array.isArray(obj)) {\n            return eq(obj[0], obj[1], true, false)\n        } else {\n            return eq(obj, root, true, true)\n        }\n    },\n\n    async $eq([item1, item2]) {\n        return eq(item1, item2, false)\n    },\n\n    async $and(obj) {\n        for (const value of obj) {\n            if (!(await value)) {\n                return false\n            }\n        }\n        return true\n    },\n\n    async $or(obj) {\n        for (const value of obj) {\n            if (await value) {\n                return true\n            }\n        }\n        return false\n    },\n\n    $lt: (obj, opt) => evaluateBinary(obj, opt, (x, y) => x < y),\n    $lte: (obj, opt) => evaluateBinary(obj, opt, (x, y) => x <= y),\n    $gt: (obj, opt) => evaluateBinary(obj, opt, (x, y) => x > y),\n    $gte: (obj, opt) => evaluateBinary(obj, opt, (x, y) => x >= y),\n    $ne: (obj, opt) => evaluateBinary(obj, opt, (x, y) => x !== y),\n\n    $regex: (obj, opt) =>\n        evaluateBinary(obj, opt, async (x, y) => {\n            if (typeof y === \"string\") {\n                return new RegExp(y).test(x)\n            } else {\n                return new RegExp(y.pattern, y.flags).test(x)\n            }\n        }),\n\n    async $in(obj, { root, prop }) {\n        const lhs = await root[prop]\n\n        for (const entry of obj) {\n            if ((await entry) === lhs) {\n                return ROOT_CONTEXT_TRUE\n            }\n        }\n\n        return ROOT_CONTEXT_FALSE\n    },\n\n    async $ref(obj, { root }) {\n        const path = (await obj).split(\".\")\n\n        let curr = await root\n        for (const key of path) {\n            if (curr === undefined) {\n                return undefined\n            }\n            curr = await curr[key]\n        }\n        return curr\n    },\n\n    async $str(obj, { root }) {\n        let result = await obj\n        for (const match of result.matchAll(STR_INTERP_REGEX)) {\n            const matchText = match[0]\n\n            // You can escape it with \"\\\"\n            if (matchText[0] === \"\\\\\") {\n                result = result.replace(matchText, matchText.slice(1))\n            } else {\n                const replacement = await builtinDirectives.$ref(match[1], { root })\n                if (replacement === null) {\n                    result = result.replace(matchText, \"\")\n                } else if (replacement !== undefined) {\n                    result = result.replace(match[0], replacement)\n                }\n            }\n        }\n        return result\n    },\n}\n\nconst STR_INTERP_REGEX = /\\\\?\\${([^}]+)}*/g\n\nasync function evaluateBinary(obj, { root, prop }, predicate) {\n    obj = await obj\n\n    if (Array.isArray(obj)) {\n        // We're not in the root context; just compare the two things in the array.\n        return predicate(await obj[0], await obj[1])\n    } else {\n        // In the root context, we compare against a property of the root.\n        return (await predicate(await root[prop], await obj)) ? ROOT_CONTEXT_TRUE : ROOT_CONTEXT_FALSE\n    }\n}\n\nasync function eq(item1, item2, match, useRootContext) {\n    const i1 = await item1\n    const i2 = await item2\n\n    if (i1 === i2 || i1 === ROOT_CONTEXT_TRUE) {\n        return true\n    }\n\n    // Are they at least the same type?\n    if (i1 === null || i2 === null) {\n        return false\n    }\n\n    if (typeof i2 === \"string\" && i1 instanceof RegExp) {\n        return i1[RAW_VALUE].test(i2)\n    }\n\n    if (typeof i1 !== \"object\" || typeof i2 !== \"object\") {\n        return false\n    }\n\n    const props = Object.keys(i1)\n    if (!match) {\n        if (props.length !== Object.keys(i2)) {\n            return false\n        }\n    }\n\n    // Now just make sure that every property of i1 matches i2.\n    for (const prop of props) {\n        // Since we might have directives here that care about the root, we want to replace the root, so let's use the\n        // \"GET_WITH_NEW_ROOT\" function\n        const val1 = useRootContext ? i1[GET_WITH_NEW_ROOT](i2, prop) : i1[prop]\n        const val2 = i2[prop]\n\n        if (!(await eq(val1, val2, match, useRootContext))) {\n            return false\n        }\n    }\n\n    return true\n}\n\n","//const { builtinDirectives } = require(\"./builtinDirectives\")\n\nimport { builtinDirectives } from \"./builtinDirectives\"\n\nconst RAW_VALUE = Symbol.for(\"__RAW_VALUE\")\nconst IS_RULIFIED = Symbol.for(\"__IS_RULIFIED\")\nconst GET_WITH_NEW_ROOT = Symbol.for(\"__GET_WITH_NEW_ROOT\")\n\n/**\n * @param  {...Record<any, any>} contexts\n * @returns {any}\n */\nexport function rulify(...contexts) {\n    const root = {}\n    let directives = {}\n\n    let alreadyRulified = false\n\n    // The caches use weak maps so that they won't cause memory leaks\n    // when the proxies or resolved values go out of scope.\n    const caches = {\n        proxyCache: new WeakMap(),\n        resolvedValueCache: new WeakMap(),\n    }\n\n    for (let context of contexts) {\n        if (context[IS_RULIFIED]) {\n            // If the thing is \"already rulfied\", then we want to grab the\n            // raw value and re-proxify it.\n            context = context[RAW_VALUE]\n            alreadyRulified = true\n        }\n        Object.assign(root, context)\n        Object.assign(directives, normalizeDirectives(context.$directives))\n    }\n\n    delete root.$directives\n\n    // If none of the contexts are already \"rulified\", then that means\n    // we have to add in the builtin directives.\n    if (!alreadyRulified) {\n        directives = Object.assign({}, builtinDirectives, directives)\n    }\n\n    return proxify(root, directives, undefined, undefined, caches)\n}\n\nfunction normalizeDirectives(directives) {\n    if (!directives) {\n        return undefined\n    }\n\n    const entries = Object.entries(directives).map(([k, v]) => [k[0] === \"$\" ? k : \"$\" + k, v])\n\n    return Object.fromEntries(entries)\n}\n\nfunction proxify(context, directives, root, prop, caches) {\n    const originalContext = context\n\n    if (caches.proxyCache.has(context)) {\n        return caches.proxyCache.get(context)\n    }\n\n    if (typeof context === \"function\") {\n        context = context()\n    }\n\n    if (context === null || typeof context !== \"object\") {\n        return context\n    }\n\n    const keys = Object.keys(context)\n    let key, directive\n\n    if (keys.length === 1 && (key = keys[0]) && (directive = directives?.[key])) {\n        const directiveArgument = proxify(context[key], directives, root, prop, caches)\n\n        return proxify(directive(directiveArgument, { root, prop }), directives, root, prop, caches)\n    }\n\n    const handler = {}\n\n    const proxy = new Proxy(context, handler)\n    caches.proxyCache.set(context, proxy)\n\n    // If the context was a function, then the value of that function should also be cached.\n    if (context !== originalContext) {\n        caches.proxyCache.set(originalContext, proxy)\n    }\n\n    if (root === undefined) {\n        root = proxy\n    }\n\n    handler.get = function (target, prop) {\n        return get(target, proxy, prop, root, directives, caches)\n    }\n\n    return proxy\n}\n\nfunction get(target, proxy, prop, root, directives, caches) {\n    // Handle these special properties first. Switch is faster than an if-else chain.\n    switch (prop) {\n        case RAW_VALUE:\n            return target\n        case IS_RULIFIED:\n            return true\n        case GET_WITH_NEW_ROOT:\n            return (newRoot, newProp) => get(target, proxy, newProp, newRoot, directives, caches)\n        case Symbol.iterator:\n            return target[Symbol.iterator]\n    }\n\n    let resolvedValues = caches.resolvedValueCache.get(proxy)\n    if (resolvedValues) {\n        if (resolvedValues.has(prop)) {\n            return resolvedValues.get(prop)\n        }\n    } else {\n        resolvedValues = new Map()\n        caches.resolvedValueCache.set(proxy, resolvedValues)\n    }\n\n    let result\n\n    // Is this a promise?\n    const then = target?.then\n    if (typeof then === \"function\") {\n        if (prop === \"then\") {\n            result = then.bind(target)\n        } else {\n            result = proxify(\n                then.bind(target)((data) => {\n                    const value = data[prop]\n                    return proxify(value, directives, root, prop, caches)\n                }),\n                directives,\n                root,\n                prop,\n                caches\n            )\n        }\n    } else {\n        result = proxify(target[prop], directives, root, prop, caches)\n    }\n\n    resolvedValues.set(prop, result)\n\n    return result\n}\n\n"],"names":["ROOT_CONTEXT_TRUE","Symbol","for","ROOT_CONTEXT_FALSE","RAW_VALUE","GET_WITH_NEW_ROOT","builtinDirectives","$directives","Error","$if","obj","condition","then","else","$match","root","Array","isArray","eq","$eq","item1","item2","$and","value","$or","$lt","opt","evaluateBinary","x","y","$lte","$gt","$gte","$ne","$regex","RegExp","test","pattern","flags","$in","prop","lhs","entry","$ref","path","split","curr","key","$str","result","match","matchAll","STR_INTERP_REGEX","matchText","replace","slice","replacement","predicate","useRootContext","i1","i2","props","Object","keys","length","val1","val2","IS_RULIFIED","rulify","contexts","directives","alreadyRulified","caches","proxyCache","WeakMap","resolvedValueCache","context","assign","normalizeDirectives","proxify","entries","map","k","v","fromEntries","originalContext","has","get","directive","directiveArgument","handler","proxy","Proxy","set","target","newRoot","newProp","iterator","resolvedValues","Map","bind","data"],"mappings":"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"}